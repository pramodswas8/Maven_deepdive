LINUX SERVER - JAVA CODE - MAVEN - NGINX -


Maven - java Build tool, other java build tools ant, maven, gradle  

Build Automation tool for java based projects
Maven uses declarative approach to configuration 
and relies on XML files called pom.xml 
pom.xml = to describe the projects structure, dependencies and build process
it also offers a vast repository of opensource libraries and plugins
that can be easily integrated into projects

features of maven :
===========================
- dependency management -
maven simplificies the mgmt the project dependencies by providing the
centralized repositories of the libraries and frameworks
it automatically downloads and manages the dependencies
 you writing the those dependencies manually, maven does all these tasks 
automatically by itself and which makes it to easy to update the 
dependencies without worrying about the conflicts.

 - project standardization -
maven provides standard project structure that is widely adopted in the java community. 
the standardization makes it easier for the developer to understand to contribute to the project even they are
new to them. begginer friendly, you can learn it easily

- build automation -
maven automates the build process makes it easy to compile, test and package the project
and developers can define build and execute them in a single command as well,
will create a project using java, using maven aswell


- plugin system -
powerful plugin system that enables the developers to extend the functionality of the build process
they are many plugins available that can be easily integrated to project to perform specific tasks
task is for example to perform such as generating the documentation deploying the applications and running the test
all these we can do by using pluggins

- consistent builds -
maven is install consistent builds across different environments by using declarative approach to configuration
declarative approach in the sense we create pom.xml file inside which writing our dependencies project structure
and build process as well

- integration with IDE's -
pretty good feature of maven integrates with IDE's eclipse, intellij, visualstudiocode
where i use the maven in the market we have popular IDE's we can use maven with these IDE's
maven is integrated inside these IDE's

overall Maven simplifies the software development process, makes easier to the developer to manage complex java based projects

10 dependencies - in a project
spring framework version

apache maven pluggins
maven repositories



Maven installation in windows
================================
prerequisites - java, maven, git, any IDE

java jdk --- download, install, environment variable

c:programfiles>java>jdk19>bin> copy the path, click start/windows button edit environment variables - both in user/system - systemvariable>path>edit>new>paste the path- ok
variable name: JAVA_HOME variable value:C:\Programfiles\java\jdk-19 
java --version

maven download
download apache maven - binary-zip-archive - extract all - 
c:programfiles>java>apachemaven>bin> copy the path, click start/windows button edit environment variables - both in user/system - systemvariables>path>edit>new>paste the path - ok
mvn --version

git
download git
git-scm.com/downloads


maven life cycle
========================
maven is based on POM (project object model)
maven is used for building and managing any java based project

default maven life cycle consists of 8 phases or steps
compiling, testing, building and installing a given java project 
-----validate, compile, test, package, intigration test, verify, install, deploy------------

1.validate = checks project structure is correct or not, 
example it checks all the project dependencies are downloaded and are available in the local repository
2.compile = compiles the source code, converts the .java files to .class , and stores the classes in the 
target/classes folder
3.test = it runs unit tests for the project
4.package = compiled code(compressed) into a distributable format like jar or war
5.integration test = it runs integration tests for the project
6.verify = this step checks project is valid and meets the quality standards
7.install = installs the packaged code to the local maven repository.
8.deploy = copies the packaged code to the remote repository for sharing it with other developers.

maven commands
====================
mvn clean = cleans the project and removes all files generated by the previous build.
mvn compile = compiles source code of the project
mvn test-compile = compiles the test source code
mvn test = runs tests for the project
mvn package = creates JAR or WAR file for the project to convert it into a distributable format.
mvn install = deploys the packaged JAR/WAR file to the local repository
mvn site = generate the project documentation
mvn validate = validate the projects POM and configuration
mvn idea:idea = generate project files for the intelliJ IDEA or Eclicpse IDE
mvn release:perform = perform a release build
mvn deploy = copies the packaged JAR/WAR file to the remote repository after compiling, running tests and building 
the project
mvn archetype:generate = this command is used to generate a new project from an archtype, which is a template
for a project. This command is typically used to create new projects based on a specific pattern or structure.
mvn dependency:tree = This command is used to display the dependencies of the project in a tree format.
typically used to understand the dependencies of the project and troubleshoot if any issues.

mvn clean install  















